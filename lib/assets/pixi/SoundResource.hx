package assets.pixi;

import js.Browser;
import js.html.RequestInit;
import js.lib.Error;
import pixi.sound.Sound;
import pixi.sound.Sounds;

/**
 * –ó–≤—É–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.  
 * –û–±—ä–µ–∫—Ç –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∑–≤—É–∫–∞ –¥–ª—è [PixiJS Sound](https://pixijs.io/pixi-sound/examples/).
 */
class SoundResource extends Resource<SoundResource, SoundParams>
{
    /**
     * –°–æ–∑–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–≤—É–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     * @param manager –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
     * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.
     */
    private function new(manager:SoundsManager, params:SoundParams) {
        super(manager, params.id==null?params.url:params.id, ResourceType.SOUND, params);

        if (params.url == null)
            throw new Error("The url of sound cannot be null");

        this.url = params.url;
        this.options = params.options==null?null:params.options;
        this.sprites = params.sprites==null?null:params.sprites;
        this.fetchParams = params.fetchParams==null?null:params.fetchParams;
    }

    /**
     * URL –ê–¥—Ä–µ—Å –∑–≤—É–∫–∞.  
     * –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å `null`
     */
    public var url(default, null):String;

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–∞.  
     * –°–ø–∏—Å–æ–∫ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ [API PixiJS Sound](https://pixijs.io/pixi-sound/docs/PIXI.sound.html#add)
     * –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–≤—É–∫–∞.
     * 
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: `null`
     */
    public var options(default, null):SoundOptions;

    /**
     * URL –ê–¥—Ä–µ—Å —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–≤—É–∫–æ–≤—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤. (–ê—Ç–ª–∞—Å)  
     * –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, –∑–≤—É–∫ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –µ–¥–∏–Ω–∏—á–Ω—ã–π.  
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: `null`
     */
    public var sprites(default, null):String;

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)
     * –∑–∞–ø—Ä–æ—Å–∞.  
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: `null`
     */
    public var fetchParams(default, null):RequestInit;

    /**
     * –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É.  
     */
    override private function load():Void {
        if (isLoading || isComplete || isDisposed)
            return;

        isLoading = true;

        // –ë–∞–≥ –≤ –ª–∏–±–µ. üò¢
        // –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–±—ã –∏–º–µ–µ—Ç –±–∞–≥ –∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç
        // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞ —Ç–µ–≥ Audio, –æ—á–µ–Ω—å –∂–∞–ª—å.
        // –ê –¥–∏–∑–∞–π–Ω API –¥–∏–∫—Ç—É–µ—Ç –Ω–∞–º —Å–ø–µ—Ä–≤–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON. üò´

        if (sprites == null) {
            // –û–¥–∏–Ω–æ—á—ã–π –∑–≤—É–∫:
            var opt = getSupportedParams(options);
            opt.url = url;
            opt.preload = true;
            opt.loaded = function(err, sound, instance) {
                if (isDisposed || isComplete)
                    return;
                if (err != null) {
                    error = err;
                    isComplete = true;
                    isLoading = false;
                    onComplete.emit(this);
                    return;
                }

                isComplete = true;
                isLoading = false;
                onComplete.emit(this);
            }
            Sounds.add(id, untyped opt);
        }
        else {
            // –°–ø—Ä–∞–π—Ç—ã: (–°–ø–µ—Ä–≤–∞ –≥—Ä—É–∑–∏–º JSON)
            if (sprites != null) {
                Browser.window.fetch(sprites, fetchParams).then(
                    function(response) {
                        if (isDisposed || isComplete)
                            return;

                        if (response.ok) {
                            response.json().then(
                                function(data) {
                                    if (isDisposed || isComplete)
                                        return;

                                    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–≤—É–∫:
                                    var opt = getSupportedParams(options);
                                    opt.url = url;
                                    opt.preload = true;
                                    opt.sprites = data;
                                    opt.loaded = function(err, sound, instance) {
                                        if (isDisposed || isComplete)
                                            return;
                                        if (err != null) {
                                            error = err;
                                            isComplete = true;
                                            isLoading = false;
                                            onComplete.emit(this);
                                            return;
                                        }

                                        isComplete = true;
                                        isLoading = false;
                                        onComplete.emit(this);
                                    }
                                    Sounds.add(id, untyped opt);
                                },
                                function(err) {
                                    if (isDisposed || isComplete)
                                        return;

                                    error = new Error('Failed to parse sound sprites data: "' + sprites + '"\n' + Std.string(err));
                                    isComplete = true;
                                    isLoading = false;
                                    onComplete.emit(this);
                                }
                            );
                        }
                        else {
                            error = new Error('Failed to load sound sprites data: ' + response.status + ' ' + response.statusText + ' "' + sprites + '"');
                            isComplete = true;
                            isLoading = false;
                            onComplete.emit(this);
                        }
                    },
                    function(err) {
                        if (isDisposed || isComplete)
                            return;

                        error = err;
                        isComplete = true;
                        isLoading = false;
                        onComplete.emit(this);
                    }
                );
            }
        }
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å —ç—Ç–æ—Ç –∑–≤—É–∫. üî•  
     * –í—ã–∑–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å —É–∂–µ –±—ã–ª –≤—ã–≥—Ä—É–∂–µ–Ω.
     * - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∑–≤—É–∫–æ–º.
     * - –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—à–∞—Ç–µ–ª–µ–π `onComplete=null`.
     * - –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ `manager=null`.
     * - –£–¥–∞–ª—è–µ—Ç –æ—à–∏–±–∫—É `error=null`.
     * - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ `isDisposed=true`.
     * 
     * –í—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç!
     */
    override public function dispose():Void {
        if (isDisposed)
            return;

        Sounds.remove(id);

        super.dispose();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
     * @return –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.
     */
    @:keep
    override public function toString():String {
        return "[SoundResource id=" + id + "]";
    }

    /**
     * –í–∑—è—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø—Ü–∏–π. (–ú–∞–ø–ø–∏–Ω–≥)
     * @param options –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π.
     * @return –ö–æ–ø–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏.
     */
    static private function getSupportedParams(options:SoundOptions):Dynamic {
        if (options == null)
            return {};
        
        var params:Dynamic = {};
        if (options.autoPlay != null)       params.autoPlay = options.autoPlay;
        if (options.singleInstance != null) params.singleInstance = options.singleInstance;
        if (options.volume != null)         params.volume = options.volume;
        if (options.speed != null)          params.speed = options.speed;
        if (options.complete != null)       params.complete = options.complete;
        if (options.loop != null)           params.loop = options.loop;

        return params;
    }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∑–≤—É–∫–∞.
 */
typedef SoundParams =
{
    /**
     * ID –†–µ—Å—É—Ä—Å–∞.  
     * –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ **url**.
     */
    @:optional var id:String;

    /**
     * URL –ê–¥—Ä–µ—Å –∑–≤—É–∫–∞.  
     * –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å `null`
     */
    var url:String;

    /**
     * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–∞.  
     * –°–ø–∏—Å–æ–∫ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ [API PixiJS Sound](https://pixijs.io/pixi-sound/docs/PIXI.sound.html#add)
     * –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–≤—É–∫–∞.
     * 
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: `null`
     */
    @:optional var options:SoundOptions;

    /**
     * URL –ê–¥—Ä–µ—Å —Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–≤—É–∫–æ–≤—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤. (–ê—Ç–ª–∞—Å)  
     * –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, –∑–≤—É–∫ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ –µ–¥–∏–Ω–∏—á–Ω—ã–π.  
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: `null`
     */
    @:optional var sprites:String;

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è [fetch()](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)
     * –∑–∞–ø—Ä–æ—Å–∞.  
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω `sprites`.
     * 
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: `null`
     */
    @:optional var fetchParams:RequestInit;
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–≤—É–∫–∞, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ API.
 * 
 * –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ PixiJS Sound.
 * –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö
 * –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º. –¢–∞–∫ –∫–∞–∫ –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ä–µ–∞–ª–∏–∑—É–µ—Ç
 * —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ—Å—Ç–∞–≤–∫–∏, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑
 * –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ API –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
 * 
 * –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ—á–∏—Å–ª—è–µ—Ç **–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ** –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è
 * –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–∞ –∏–∑ [–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ API](https://pixijs.io/pixi-sound/docs/PIXI.sound.html).
 */
typedef SoundOptions =
{
    /**
     * `true` to play after loading.  
     * Default: `false`
     */
    @:optional var autoPlay:Bool;

    /**
     * `true` to disallow playing multiple layered instances at once.  
     * Default: `false`
     */
    @:optional var singleInstance:Bool;

    /**
     * The amount of volume `1` = 100%.  
     * Default: `1`
     */
    @:optional var volume:Float;

    /**
     * The playback rate where `1` is 100% speed.  
     * Default: `1`
     */
    @:optional var speed:Float;

    /**
     * Global complete callback when play is finished.  
     * Default: `null`
     */
    @:optional var complete:CompleteCallback;

    /**
     * `true` to loop the audio playback.  
     * Default: `false`
     */
    @:optional var loop:Bool;
}